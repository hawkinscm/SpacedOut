package model;

import java.util.LinkedList;

import unit.UnitTest;

/**
 * Unit tester for the Battle class.
 */
public class BattleTest extends UnitTest {

	private final String INVALID_BATTLE_START = "Invalid battle starting card:";
	
	private Player p1;
	private Player p2;
	private Player p3;
	private Player p4;
	private LinkedList<Player> players;
	
	public int testAll() {
		initialize();
		
		testConstructor();
		testPlayCard();
		
		return errorCount;
	}
	
	private void initialize() {				
		p1 = new Player("p1", PlayerType.HOST);
		p2 = new Player("p2", PlayerType.COMPUTER_EASY);
		p3 = new Player("p3", PlayerType.COMPUTER_MEDIUM);
		p4 = new Player("p4", PlayerType.COMPUTER_HARD);
		players = new LinkedList<Player>();
		players.add(p1);
		players.add(p2);
		players.add(p3);
		players.add(p4);
	}
	
	private void testConstructor() {
		Battle battle = new Battle(new LinkedList<Player>(), true);
		assertEquals(battle.getPlayerCount(), 0);
		assertEquals(battle.getTotalCardsToDraw(), 0);
		assertFalse(battle.isBigBangBattle());
		assertNull(battle.getNextAttackedPlayer());
				
		battle = new Battle(players, true);
		assertEquals(battle.getPlayerCount(), 4);
		assertEquals(battle.getTotalCardsToDraw(), 0);
		assertFalse(battle.isBigBangBattle());
		assertNull(battle.getNextAttackedPlayer());
		
		battle = new Battle(players, false);
		assertEquals(battle.getPlayerCount(), 4);
		assertEquals(battle.getTotalCardsToDraw(), 0);
		assertFalse(battle.isBigBangBattle());
		assertNull(battle.getNextAttackedPlayer());
		battle.removePlayer(p2);
		assertEquals(battle.getPlayerCount(), 3);
		battle.removePlayer(p1);
		assertEquals(battle.getPlayerCount(), 2);
		battle.removePlayer(p4);
		assertEquals(battle.getPlayerCount(), 1);
		battle.removePlayer(p3);
		assertEquals(battle.getPlayerCount(), 0);
		assertEquals(players.size(), 4);
		assertNull(battle.getNextAttackedPlayer());
	}
	
	private void testPlayCard() {
		Card rbBB = new Card(Card.Design.BIG_BANG, Card.Color.BLUE_AND_RED, 100);
		Card gyBB = new Card(Card.Design.BIG_BANG, Card.Color.GREEN_AND_YELLOW, 100);
		Card rFF = new Card(Card.Design.FORCE_FIELD, Card.Color.RED, 20);
		Card bFF = new Card(Card.Design.FORCE_FIELD, Card.Color.BLUE, 20);
		Card gFF = new Card(Card.Design.FORCE_FIELD, Card.Color.GREEN, 20);
		Card yFF = new Card(Card.Design.FORCE_FIELD, Card.Color.YELLOW, 20);
		Card wFF = new Card(Card.Design.FORCE_FIELD, Card.Color.WILD, 100);
		Card rA = new Card(Card.Design.ASTEROIDS, Card.Color.RED, 20);
		Card bA = new Card(Card.Design.ASTEROIDS, Card.Color.BLUE, 20);
		Card gA = new Card(Card.Design.ASTEROIDS, Card.Color.GREEN, 20);
		Card yA = new Card(Card.Design.ASTEROIDS, Card.Color.YELLOW, 20);
		Card rSS = new Card(Card.Design.SHOOTING_STAR, Card.Color.RED, 20);
		Card bSS = new Card(Card.Design.SHOOTING_STAR, Card.Color.BLUE, 20);
		Card gSS = new Card(Card.Design.SHOOTING_STAR, Card.Color.GREEN, 20);
		Card ySS = new Card(Card.Design.SHOOTING_STAR, Card.Color.YELLOW, 20);
		Card wSS = new Card(Card.Design.SHOOTING_STAR, Card.Color.WILD, 30);
		Card yBH = new Card(Card.Design.BLACK_HOLE, Card.Color.YELLOW, 30);
		Card wBH = new Card(Card.Design.BLACK_HOLE, Card.Color.WILD, 50);
		Card gN = new Card(Card.Design.NUMBER, Card.Color.GREEN, 7);
		
		Battle battle = new Battle(players, true);
		assertEquals(battle.playCardIfAllowed(p1, rbBB, Card.Color.WILD), "");
		assertEquals(battle.getTotalCardsToDraw(), 0);
		assertFalse(battle.isBigBangBattle());
		assertNull(battle.getNextAttackedPlayer());
		assertNull(battle.playCardIfAllowed(p1, rbBB, Card.Color.RED));
		assertEquals(battle.getTotalCardsToDraw(), 3);
		assertTrue(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p2);
		assertEquals(battle.playCardIfAllowed(p2, gyBB, Card.Color.GREEN), "Can only play SUPER FORCE FIELD on BIG BANG attack.");
		assertEquals(battle.playCardIfAllowed(p3, rbBB, Card.Color.RED), "Can only play SUPER FORCE FIELD on BIG BANG attack.");
		assertEquals(battle.getTotalCardsToDraw(), 3);
		assertTrue(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p2);
		assertEquals(battle.playCardIfAllowed(p4, yFF, Card.Color.YELLOW), "Can only play SUPER FORCE FIELD on BIG BANG attack.");
		assertEquals(battle.playCardIfAllowed(p4, wFF, Card.Color.WILD), "");
		assertNull(battle.playCardIfAllowed(p4, wFF, Card.Color.YELLOW));
		assertEquals(battle.getTotalCardsToDraw(), 3);
		assertTrue(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p3);
		assertNull(battle.playCardIfAllowed(p2, wFF, Card.Color.BLUE));
		assertEquals(battle.getTotalCardsToDraw(), 3);
		assertTrue(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p3);
		assertNull(battle.playCardIfAllowed(p1, wFF, Card.Color.GREEN));
		assertEquals(battle.getTotalCardsToDraw(), 3);
		assertTrue(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p4);
		assertEquals(battle.playCardIfAllowed(p4, gFF, Card.Color.GREEN), "Can only play SUPER FORCE FIELD on BIG BANG attack.");
		assertEquals(battle.playCardIfAllowed(p4, gN, Card.Color.GREEN), "Can only play SUPER FORCE FIELD on BIG BANG attack.");
		assertEquals(battle.playCardIfAllowed(p4, gA, Card.Color.GREEN), "Can only play SUPER FORCE FIELD on BIG BANG attack.");
		assertEquals(battle.playCardIfAllowed(p4, gSS, Card.Color.GREEN), "Can only play SUPER FORCE FIELD on BIG BANG attack.");
		assertEquals(battle.playCardIfAllowed(p4, wSS, Card.Color.GREEN), "Can only play SUPER FORCE FIELD on BIG BANG attack.");
		assertEquals(battle.playCardIfAllowed(p4, yBH, Card.Color.GREEN), "Can only play SUPER FORCE FIELD on BIG BANG attack.");
		assertEquals(battle.playCardIfAllowed(p4, wBH, Card.Color.GREEN), "Can only play SUPER FORCE FIELD on BIG BANG attack.");
		assertEquals(battle.playCardIfAllowed(p4, wBH, Card.Color.WILD), "");
		assertEquals(battle.playCardIfAllowed(p4, rbBB, Card.Color.GREEN), "Can only play SUPER FORCE FIELD on BIG BANG attack.");
		assertEquals(battle.playCardIfAllowed(p4, gyBB, Card.Color.GREEN), "Can only play SUPER FORCE FIELD on BIG BANG attack.");
		assertEquals(battle.getTotalCardsToDraw(), 3);
		assertTrue(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p4);
		
		battle = new Battle(players, false);
		assertEquals(battle.playCardIfAllowed(p2, bA, Card.Color.WILD), "");
		assertEquals(battle.getTotalCardsToDraw(), 0);
		assertFalse(battle.isBigBangBattle());
		assertNull(battle.getNextAttackedPlayer());
		assertNull(battle.playCardIfAllowed(p2, bA, Card.Color.BLUE));
		assertEquals(battle.getTotalCardsToDraw(), 2);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p1);
		assertNull(battle.playCardIfAllowed(p2, bA, Card.Color.BLUE));
		assertEquals(battle.getTotalCardsToDraw(), 4);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p1);
		assertNull(battle.playCardIfAllowed(p1, yA, Card.Color.YELLOW));
		assertEquals(battle.getTotalCardsToDraw(), 6);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p4);
		assertNull(battle.playCardIfAllowed(p3, rA, Card.Color.RED));
		assertEquals(battle.getTotalCardsToDraw(), 8);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p2);
		assertNull(battle.playCardIfAllowed(p4, gA, Card.Color.GREEN));
		assertEquals(battle.getTotalCardsToDraw(), 10);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p3);
		assertEquals(battle.playCardIfAllowed(p3, gN, Card.Color.GREEN), "Can only play ASTEROIDS or GREEN FORCE FIELD on GREEN ASTEROIDS attack.");
		assertEquals(battle.playCardIfAllowed(p3, gSS, Card.Color.GREEN), "Can only play ASTEROIDS or GREEN FORCE FIELD on GREEN ASTEROIDS attack.");
		assertEquals(battle.playCardIfAllowed(p3, wSS, Card.Color.GREEN), "Can only play ASTEROIDS or GREEN FORCE FIELD on GREEN ASTEROIDS attack.");
		assertEquals(battle.playCardIfAllowed(p3, yBH, Card.Color.GREEN), "Can only play ASTEROIDS or GREEN FORCE FIELD on GREEN ASTEROIDS attack.");
		assertEquals(battle.playCardIfAllowed(p3, wBH, Card.Color.GREEN), "Can only play ASTEROIDS or GREEN FORCE FIELD on GREEN ASTEROIDS attack.");
		assertEquals(battle.playCardIfAllowed(p3, wBH, Card.Color.WILD), "");
		assertEquals(battle.playCardIfAllowed(p3, rbBB, Card.Color.GREEN), "Can only play ASTEROIDS or GREEN FORCE FIELD on GREEN ASTEROIDS attack.");
		assertEquals(battle.playCardIfAllowed(p3, gyBB, Card.Color.GREEN), "Can only play ASTEROIDS or GREEN FORCE FIELD on GREEN ASTEROIDS attack.");
		assertEquals(battle.playCardIfAllowed(p3, rFF, Card.Color.RED), "Can only play ASTEROIDS or GREEN FORCE FIELD on GREEN ASTEROIDS attack.");
		assertEquals(battle.playCardIfAllowed(p3, bFF, Card.Color.BLUE), "Can only play ASTEROIDS or GREEN FORCE FIELD on GREEN ASTEROIDS attack.");
		assertEquals(battle.playCardIfAllowed(p3, yFF, Card.Color.YELLOW), "Can only play ASTEROIDS or GREEN FORCE FIELD on GREEN ASTEROIDS attack.");
		assertEquals(battle.getTotalCardsToDraw(), 10);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p3);
		assertNull(battle.playCardIfAllowed(p3, gFF, Card.Color.GREEN));
		assertEquals(battle.getTotalCardsToDraw(), 10);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p4);
		assertEquals(battle.playCardIfAllowed(p4, gA, Card.Color.GREEN), "Can only play FORCE FIELD on FORCE FIELD defense.");
		assertEquals(battle.playCardIfAllowed(p4, gN, Card.Color.GREEN), "Can only play FORCE FIELD on FORCE FIELD defense.");
		assertEquals(battle.playCardIfAllowed(p4, gSS, Card.Color.GREEN), "Can only play FORCE FIELD on FORCE FIELD defense.");
		assertEquals(battle.playCardIfAllowed(p4, wSS, Card.Color.GREEN), "Can only play FORCE FIELD on FORCE FIELD defense.");
		assertEquals(battle.playCardIfAllowed(p4, yBH, Card.Color.GREEN), "Can only play FORCE FIELD on FORCE FIELD defense.");
		assertEquals(battle.playCardIfAllowed(p4, wBH, Card.Color.GREEN), "Can only play FORCE FIELD on FORCE FIELD defense.");
		assertEquals(battle.playCardIfAllowed(p4, wBH, Card.Color.WILD), "");
		assertEquals(battle.playCardIfAllowed(p4, rbBB, Card.Color.GREEN), "Can only play FORCE FIELD on FORCE FIELD defense.");
		assertEquals(battle.playCardIfAllowed(p4, gyBB, Card.Color.GREEN), "Can only play FORCE FIELD on FORCE FIELD defense.");
		assertNull(battle.playCardIfAllowed(p4, gFF, Card.Color.GREEN));
		assertEquals(battle.getTotalCardsToDraw(), 10);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p3);
		assertNull(battle.playCardIfAllowed(p1, rFF, Card.Color.RED));
		assertEquals(battle.getTotalCardsToDraw(), 10);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p2);
		assertNull(battle.playCardIfAllowed(p3, yFF, Card.Color.YELLOW));
		assertEquals(battle.getTotalCardsToDraw(), 10);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p2);
		assertNull(battle.playCardIfAllowed(p4, wFF, Card.Color.BLUE));
		assertEquals(battle.getTotalCardsToDraw(), 10);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p1);
		assertNull(battle.playCardIfAllowed(p3, wFF, Card.Color.YELLOW));
		assertEquals(battle.getTotalCardsToDraw(), 10);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p2);
		assertNull(battle.playCardIfAllowed(p2, wFF, Card.Color.BLUE));
		assertEquals(battle.getTotalCardsToDraw(), 10);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p3);
		assertNull(battle.playCardIfAllowed(p2, wFF, Card.Color.RED));
		assertEquals(battle.getTotalCardsToDraw(), 10);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p1);
		battle.removePlayer(p4);
		assertNull(battle.playCardIfAllowed(p3, bFF, Card.Color.BLUE));
		assertEquals(battle.getTotalCardsToDraw(), 10);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p1);
		
		Player p5 = new Player("p5", PlayerType.HOST);
		players.add(p5);
		battle = new Battle(players, true);
		assertEquals(battle.getPlayerCount(), 5);
		assertEquals(battle.playCardIfAllowed(p2, ySS, Card.Color.WILD), "");
		assertEquals(battle.getTotalCardsToDraw(), 0);
		assertFalse(battle.isBigBangBattle());
		assertNull(battle.getNextAttackedPlayer());
		assertNull(battle.playCardIfAllowed(p2, ySS, Card.Color.YELLOW));
		assertEquals(battle.getTotalCardsToDraw(), 2);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p4);
		assertNull(battle.playCardIfAllowed(p4, bSS, Card.Color.YELLOW));
		assertEquals(battle.getTotalCardsToDraw(), 4);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p1);
		assertNull(battle.playCardIfAllowed(p1, bSS, Card.Color.BLUE));
		assertEquals(battle.getTotalCardsToDraw(), 6);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p3);
		assertNull(battle.playCardIfAllowed(p3, rSS, Card.Color.RED));
		assertEquals(battle.getTotalCardsToDraw(), 8);
		assertFalse(battle.isBigBangBattle());		
		assertTrue(battle.getNextAttackedPlayer() == p5);
		assertNull(battle.playCardIfAllowed(p5, wSS, Card.Color.RED));
		assertEquals(battle.getTotalCardsToDraw(), 10);
		assertFalse(battle.isBigBangBattle());		
		assertTrue(battle.getNextAttackedPlayer() == p2);
		assertNull(battle.playCardIfAllowed(p2, wSS, Card.Color.BLUE));
		assertEquals(battle.getTotalCardsToDraw(), 12);
		assertFalse(battle.isBigBangBattle());		
		assertTrue(battle.getNextAttackedPlayer() == p4);
		assertNull(battle.playCardIfAllowed(p5, gSS, Card.Color.GREEN));
		assertEquals(battle.getTotalCardsToDraw(), 14);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p2);
		assertEquals(battle.playCardIfAllowed(p2, gN, Card.Color.GREEN), "Can only play SHOOTING STAR or GREEN FORCE FIELD on GREEN SHOOTING STAR attack.");
		assertEquals(battle.playCardIfAllowed(p2, gA, Card.Color.GREEN), "Can only play SHOOTING STAR or GREEN FORCE FIELD on GREEN SHOOTING STAR attack.");
		assertEquals(battle.playCardIfAllowed(p2, yBH, Card.Color.GREEN), "Can only play SHOOTING STAR or GREEN FORCE FIELD on GREEN SHOOTING STAR attack.");
		assertEquals(battle.playCardIfAllowed(p2, wBH, Card.Color.GREEN), "Can only play SHOOTING STAR or GREEN FORCE FIELD on GREEN SHOOTING STAR attack.");
		assertEquals(battle.playCardIfAllowed(p2, wBH, Card.Color.WILD), "");
		assertEquals(battle.playCardIfAllowed(p2, rbBB, Card.Color.GREEN), "Can only play SHOOTING STAR or GREEN FORCE FIELD on GREEN SHOOTING STAR attack.");
		assertEquals(battle.playCardIfAllowed(p2, gyBB, Card.Color.GREEN), "Can only play SHOOTING STAR or GREEN FORCE FIELD on GREEN SHOOTING STAR attack.");
		assertEquals(battle.playCardIfAllowed(p2, rFF, Card.Color.RED), "Can only play SHOOTING STAR or GREEN FORCE FIELD on GREEN SHOOTING STAR attack.");
		assertEquals(battle.playCardIfAllowed(p2, bFF, Card.Color.BLUE), "Can only play SHOOTING STAR or GREEN FORCE FIELD on GREEN SHOOTING STAR attack.");
		assertEquals(battle.playCardIfAllowed(p2, yFF, Card.Color.YELLOW), "Can only play SHOOTING STAR or GREEN FORCE FIELD on GREEN SHOOTING STAR attack.");
		assertEquals(battle.getTotalCardsToDraw(), 14);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p2);
		assertNull(battle.playCardIfAllowed(p2, wFF, Card.Color.RED));
		assertEquals(battle.getTotalCardsToDraw(), 14);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p5);
		assertEquals(battle.playCardIfAllowed(p5, gA, Card.Color.GREEN), "Can only play FORCE FIELD on FORCE FIELD defense.");
		assertEquals(battle.playCardIfAllowed(p5, gN, Card.Color.GREEN), "Can only play FORCE FIELD on FORCE FIELD defense.");
		assertEquals(battle.playCardIfAllowed(p5, gSS, Card.Color.GREEN), "Can only play FORCE FIELD on FORCE FIELD defense.");
		assertEquals(battle.playCardIfAllowed(p5, wSS, Card.Color.GREEN), "Can only play FORCE FIELD on FORCE FIELD defense.");
		assertEquals(battle.playCardIfAllowed(p5, yBH, Card.Color.GREEN), "Can only play FORCE FIELD on FORCE FIELD defense.");
		assertEquals(battle.playCardIfAllowed(p5, wBH, Card.Color.GREEN), "Can only play FORCE FIELD on FORCE FIELD defense.");
		assertEquals(battle.playCardIfAllowed(p5, wBH, Card.Color.WILD), "");
		assertEquals(battle.playCardIfAllowed(p5, rbBB, Card.Color.GREEN), "Can only play FORCE FIELD on FORCE FIELD defense.");
		assertEquals(battle.playCardIfAllowed(p5, gyBB, Card.Color.GREEN), "Can only play FORCE FIELD on FORCE FIELD defense.");
		assertNull(battle.playCardIfAllowed(p5, gFF, Card.Color.GREEN));
		assertEquals(battle.getTotalCardsToDraw(), 14);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p2);
		assertNull(battle.playCardIfAllowed(p1, wFF, Card.Color.GREEN));
		assertEquals(battle.getTotalCardsToDraw(), 14);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p4);
		assertNull(battle.playCardIfAllowed(p3, yFF, Card.Color.YELLOW));
		assertEquals(battle.getTotalCardsToDraw(), 14);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p5);
		assertNull(battle.playCardIfAllowed(p4, gFF, Card.Color.GREEN));
		assertEquals(battle.getTotalCardsToDraw(), 14);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p2);
		assertNull(battle.playCardIfAllowed(p3, wFF, Card.Color.BLUE));
		assertEquals(battle.getTotalCardsToDraw(), 14);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p5);
		assertNull(battle.playCardIfAllowed(p2, wFF, Card.Color.BLUE));
		assertEquals(battle.getTotalCardsToDraw(), 14);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p5);
		assertNull(battle.playCardIfAllowed(p2, wFF, Card.Color.BLUE));
		assertEquals(battle.getTotalCardsToDraw(), 14);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p4);
		assertNull(battle.playCardIfAllowed(p3, bFF, Card.Color.RED));
		assertEquals(battle.getTotalCardsToDraw(), 14);
		assertFalse(battle.isBigBangBattle());
		assertTrue(battle.getNextAttackedPlayer() == p1);
		
		battle = new Battle(players, true);
		assertTrue(battle.playCardIfAllowed(p2, gN, Card.Color.RED).startsWith(INVALID_BATTLE_START));
		assertTrue(battle.playCardIfAllowed(p2, yBH, Card.Color.YELLOW).startsWith(INVALID_BATTLE_START));
		assertTrue(battle.playCardIfAllowed(p2, wBH, Card.Color.BLUE).startsWith(INVALID_BATTLE_START));
		assertEquals(battle.playCardIfAllowed(p2, wBH, Card.Color.WILD), "");
		assertTrue(battle.playCardIfAllowed(p2, gFF, Card.Color.GREEN).startsWith(INVALID_BATTLE_START));
		assertTrue(battle.playCardIfAllowed(p2, wFF, Card.Color.BLUE).startsWith(INVALID_BATTLE_START));
		assertEquals(battle.playCardIfAllowed(p2, wFF, Card.Color.WILD), "");
		assertEquals(battle.getTotalCardsToDraw(), 0);
		assertFalse(battle.isBigBangBattle());
		assertNull(battle.getNextAttackedPlayer());
	}
}
